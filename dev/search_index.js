var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Complete API documentation for GTFSSchedules.jl functions and types.","category":"page"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#GTFSSchedules.read_gtfs","page":"API Reference","title":"GTFSSchedules.read_gtfs","text":"read_gtfs(filepath::String) -> GTFSSchedule\n\nRead a GTFS Schedule feed from a ZIP file or unzipped directory and return a GTFSSchedule struct.\n\nArguments\n\nfilepath::String: Path to the GTFS ZIP file or directory containing GTFS files\n\nReturns\n\nGTFSSchedule: Complete GTFS Schedule dataset\n\nExample\n\n# Read from ZIP file\nfeed = read_gtfs(\"path/to/transit_feed.zip\")\n\n# Read from unzipped directory\nfeed = read_gtfs(\"path/to/transit_feed/\")\n\nprintln(\"Loaded GTFS feed with $(DataFrames.nrow(feed.agency)) agencies\")\n\nThrows\n\nArgumentError: If the file/directory doesn't exist or is not a valid GTFS source\nGTFSError: If required files are missing or data is invalid\n\n\n\n\n\n","category":"function"},{"location":"api/#Validation-Functions","page":"API Reference","title":"Validation Functions","text":"","category":"section"},{"location":"api/#GTFSSchedules.Validations.validate_gtfs","page":"API Reference","title":"GTFSSchedules.Validations.validate_gtfs","text":"validate_gtfs(gtfs_feed::GTFSSchedule) -> ValidationResult\n\nApply all GTFS validators to a feed and return comprehensive results.\n\nThis function runs:\n\nField type validation\nField conditions validation\nFile conditions validation\nEnum values validation\nField constraints validation\n\nArguments\n\ngtfs_feed::GTFSSchedule: The GTFS feed to validate\n\nReturns\n\nValidationResult: Combined validation results from all validators\n\nExamples\n\nusing GTFSSchedules\n\ngtfs = read_gtfs(\"path/to/gtfs\")\nresult = GTFS.Validations.validate_gtfs(gtfs)\nGTFS.Validations.print_validation_results(result)\n\nif GTFS.Validations.has_validation_errors(result)\n    println(\"Validation failed!\")\nelse\n    println(\"All validations passed!\")\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#GTFSSchedules.Validations.print_validation_results","page":"API Reference","title":"GTFSSchedules.Validations.print_validation_results","text":"print_validation_results(result::ValidationResult)\n\nPrint validation results in a human-readable format.\n\n\n\n\n\n","category":"function"},{"location":"api/#GTFSSchedules.Validations.has_validation_errors","page":"API Reference","title":"GTFSSchedules.Validations.has_validation_errors","text":"has_validation_errors(result::ValidationResult) -> Bool\n\nCheck if validation results contain any errors.\n\n\n\n\n\n","category":"function"},{"location":"api/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/#GTFSSchedules.Validations.ValidationResult","page":"API Reference","title":"GTFSSchedules.Validations.ValidationResult","text":"ValidationResult\n\nResult of GTFS validation containing errors and warnings.\n\nFields\n\nis_valid::Bool: Whether the GTFS feed is valid\nmessages::Vector{ValidationMessage}: List of validation messages\nsummary::String: Summary of validation results\n\n\n\n\n\n","category":"type"},{"location":"api/#GTFSSchedules.Validations.ValidationMessage","page":"API Reference","title":"GTFSSchedules.Validations.ValidationMessage","text":"ValidationMessage\n\nRepresents a specific validation message with context.\n\nFields\n\nfile::String: Name of the GTFS file where the message occurred\nfield::Union{String, Nothing}: Name of the field (if applicable)\nmessage::String: Message text\nseverity::Symbol: Message severity (:error, :warning, or :info)\n\n\n\n\n\n","category":"type"},{"location":"api/#Data-Structures","page":"API Reference","title":"Data Structures","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"GTFSSchedule is a type alias for Dict{String,Union{DataFrames.DataFrame,Nothing}} that stores GTFS data tables.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Practical examples for using GTFSSchedule.jl to analyze transit data.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This page provides practical examples of how to use GTFSSchedule.jl for common transit data analysis tasks.","category":"page"},{"location":"examples/#Basic-Data-Exploration","page":"Examples","title":"Basic Data Exploration","text":"","category":"section"},{"location":"examples/#Loading-and-Inspecting-a-GTFS-Feed","page":"Examples","title":"Loading and Inspecting a GTFS Feed","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GTFSSchedules\nusing DataFrames\n\n# Load a GTFS feed\ngtfs = read_gtfs(\"transit_feed.zip\")\n\n# Basic information about the feed\nprintln(\"=== GTFS Feed Overview ===\")\nprintln(\"Agencies: \", nrow(gtfs[\"agency.txt\"]))\nprintln(\"Stops: \", nrow(gtfs[\"stops.txt\"]))\nprintln(\"Routes: \", nrow(gtfs[\"routes.txt\"]))\nprintln(\"Trips: \", nrow(gtfs[\"trips.txt\"]))\nprintln(\"Stop Times: \", nrow(gtfs[\"stop_times.txt\"]))\n\n# Check for optional files\noptional_files = [\n    (\"Calendar\", \"calendar.txt\"),\n    (\"Calendar Dates\", \"calendar_dates.txt\"),\n    (\"Fare Attributes\", \"fare_attributes.txt\"),\n    (\"Shapes\", \"shapes.txt\"),\n    (\"Transfers\", \"transfers.txt\"),\n    (\"Feed Info\", \"feed_info.txt\")\n]\n\nprintln(\"\\n=== Optional Files ===\")\nfor (name, filename) in optional_files\n    if haskey(gtfs, filename) && gtfs[filename] !== nothing\n        status = \"✓ Present ($(nrow(gtfs[filename])) records)\"\n    else\n        status = \"✗ Not present\"\n    end\n    println(\"$name: $status\")\nend","category":"page"},{"location":"examples/#Agency-Information","page":"Examples","title":"Agency Information","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Display all agencies\nprintln(\"=== Transit Agencies ===\")\nfor row in eachrow(gtfs[\"agency.txt\"])\n    println(\"$(row.agency_name)\")\n    println(\"  URL: $(row.agency_url)\")\n    println(\"  Timezone: $(row.agency_timezone)\")\n    if hasproperty(row, :agency_phone)\n        println(\"  Phone: $(row.agency_phone)\")\n    end\n    println()\nend","category":"page"},{"location":"examples/#Route-Analysis","page":"Examples","title":"Route Analysis","text":"","category":"section"},{"location":"examples/#Route-Types-and-Statistics","page":"Examples","title":"Route Types and Statistics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze route types\nprintln(\"=== Route Types ===\")\nroute_type_names = Dict(\n    0 => \"Light Rail\",\n    1 => \"Subway/Metro\",\n    2 => \"Rail\",\n    3 => \"Bus\",\n    4 => \"Ferry\",\n    5 => \"Cable Tram\",\n    6 => \"Aerial Lift\",\n    7 => \"Funicular\",\n    11 => \"Trolleybus\",\n    12 => \"Monorail\"\n)\n\nroutes_df = gtfs[\"routes.txt\"]\nroute_counts = Dict{Int, Int}()\nfor row in eachrow(routes_df)\n    route_type = row.route_type\n    route_counts[route_type] = get(route_counts, route_type, 0) + 1\nend\n\nfor (type_id, count) in sort(collect(route_counts))\n    type_name = get(route_type_names, type_id, \"Unknown ($type_id)\")\n    println(\"$type_name: $count routes\")\nend","category":"page"},{"location":"examples/#Bus-Route-Analysis","page":"Examples","title":"Bus Route Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Focus on bus routes\nroutes_df = gtfs[\"routes.txt\"]\nbus_routes = filter(row -> row.route_type == 3, routes_df)\n\nprintln(\"=== Bus Routes ===\")\nprintln(\"Total bus routes: \", nrow(bus_routes))\n\n# Show first few bus routes\nprintln(\"\\nFirst 10 bus routes:\")\nfor (i, row) in enumerate(eachrow(bus_routes))\n    if i > 10\n        break\n    end\n    println(\"$(row.route_short_name) - $(row.route_long_name)\")\nend\n\n# Routes with colors\ncolored_routes = filter(row -> hasproperty(row, :route_color) && !ismissing(row.route_color), bus_routes)\nprintln(\"\\nRoutes with colors: \", nrow(colored_routes))","category":"page"},{"location":"examples/#Stop-Analysis","page":"Examples","title":"Stop Analysis","text":"","category":"section"},{"location":"examples/#Stop-Types-and-Locations","page":"Examples","title":"Stop Types and Locations","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze stop types\nprintln(\"=== Stop Types ===\")\nlocation_type_names = Dict(\n    0 => \"Stop/Platform\",\n    1 => \"Station\",\n    2 => \"Entrance/Exit\",\n    3 => \"Generic Node\",\n    4 => \"Boarding Area\"\n)\n\nstop_counts = Dict{Int, Int}()\nfor row in eachrow(gtfs.stops)\n    location_type = get(row, :location_type, 0)  # Default to 0 if missing\n    stop_counts[location_type] = get(stop_counts, location_type, 0) + 1\nend\n\nfor (type_id, count) in sort(collect(stop_counts))\n    type_name = get(location_type_names, type_id, \"Unknown ($type_id)\")\n    println(\"$type_name: $count\")\nend","category":"page"},{"location":"examples/#Geographic-Analysis","page":"Examples","title":"Geographic Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze stop coordinates\nstops_with_coords = filter(row -> !ismissing(row.stop_lat) && !ismissing(row.stop_lon), gtfs.stops)\n\nif nrow(stops_with_coords) > 0\n    println(\"=== Geographic Coverage ===\")\n    lats = stops_with_coords.stop_lat\n    lons = stops_with_coords.stop_lon\n\n    println(\"Latitude range: $(minimum(lats)) to $(maximum(lats))\")\n    println(\"Longitude range: $(minimum(lons)) to $(maximum(lons))\")\n\n    # Find stops in a specific area (example: downtown)\n    downtown_stops = filter(row ->\n        40.7 <= row.stop_lat <= 40.8 &&\n        -74.0 <= row.stop_lon <= -73.9,\n        stops_with_coords\n    )\n    println(\"Stops in downtown area: \", nrow(downtown_stops))\nend","category":"page"},{"location":"examples/#Trip-and-Schedule-Analysis","page":"Examples","title":"Trip and Schedule Analysis","text":"","category":"section"},{"location":"examples/#Service-Patterns","page":"Examples","title":"Service Patterns","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze service patterns\nprintln(\"=== Service Analysis ===\")\n\n# Count trips per route\ntrip_counts = Dict{String, Int}()\nfor row in eachrow(gtfs.trips)\n    route_id = row.route_id\n    trip_counts[route_id] = get(trip_counts, route_id, 0) + 1\nend\n\n# Find routes with most trips\ntop_routes = sort(collect(trip_counts), by=x->x[2], rev=true)[1:min(10, length(trip_counts))]\n\nprintln(\"Routes with most trips:\")\nfor (route_id, count) in top_routes\n    # Find route name\n    route_info = filter(row -> row.route_id == route_id, gtfs.routes)\n    if nrow(route_info) > 0\n        route_name = route_info.route_short_name[1]\n        println(\"  $route_name ($route_id): $count trips\")\n    end\nend","category":"page"},{"location":"examples/#Stop-Time-Analysis","page":"Examples","title":"Stop Time Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze stop times\nprintln(\"\\n=== Stop Time Analysis ===\")\n\n# Count stops per trip\nstop_counts_per_trip = Dict{String, Int}()\nfor row in eachrow(gtfs.stop_times)\n    trip_id = row.trip_id\n    stop_counts_per_trip[trip_id] = get(stop_counts_per_trip, trip_id, 0) + 1\nend\n\nif !isempty(stop_counts_per_trip)\n    stop_counts = collect(values(stop_counts_per_trip))\n    println(\"Average stops per trip: \", round(mean(stop_counts), digits=1))\n    println(\"Min stops per trip: \", minimum(stop_counts))\n    println(\"Max stops per trip: \", maximum(stop_counts))\nend\n\n# Find trips with most stops\nlongest_trips = sort(collect(stop_counts_per_trip), by=x->x[2], rev=true)[1:min(5, length(stop_counts_per_trip))]\nprintln(\"\\nLongest trips (by number of stops):\")\nfor (trip_id, count) in longest_trips\n    println(\"  $trip_id: $count stops\")\nend","category":"page"},{"location":"examples/#Validation-Examples","page":"Examples","title":"Validation Examples","text":"","category":"section"},{"location":"examples/#Basic-Validation","page":"Examples","title":"Basic Validation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Validate the feed\nprintln(\"=== Validation ===\")\nresult = GTFSSchedules.Validations.validate_gtfs(gtfs)\n\nprintln(\"Validation result: \", result.summary)\n\nif !result.is_valid\n    println(\"\\nIssues found:\")\n\n    # Separate errors and warnings\n    errors = filter(e -> e.severity == :error, result.messages)\n    warnings = filter(e -> e.severity == :warning, result.messages)\n\n    if !isempty(errors)\n        println(\"\\nErrors:\")\n        for (i, error) in enumerate(errors[1:min(10, length(errors))])\n            println(\"  $i. $(error.file): $(error.message)\")\n        end\n        if length(errors) > 10\n            println(\"  ... and $(length(errors) - 10) more errors\")\n        end\n    end\n\n    if !isempty(warnings)\n        println(\"\\nWarnings:\")\n        for (i, warning) in enumerate(warnings[1:min(10, length(warnings))])\n            println(\"  $i. $(warning.file): $(warning.message)\")\n        end\n        if length(warnings) > 10\n            println(\"  ... and $(length(warnings) - 10) more warnings\")\n        end\n    end\nend","category":"page"},{"location":"examples/#Validation-with-Custom-Limits","page":"Examples","title":"Validation with Custom Limits","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Validate with limited warnings\nresult = GTFSSchedules.Validations.validate_gtfs(gtfs)\nprintln(\"Validation with limited warnings: \", result.summary)","category":"page"},{"location":"examples/#Advanced-Examples","page":"Examples","title":"Advanced Examples","text":"","category":"section"},{"location":"examples/#Finding-Transfer-Opportunities","page":"Examples","title":"Finding Transfer Opportunities","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze transfers if available\nif gtfs.transfers !== nothing\n    println(\"=== Transfer Analysis ===\")\n    println(\"Total transfers: \", nrow(gtfs.transfers))\n\n    # Transfer types\n    transfer_types = Dict(\n        0 => \"Recommended\",\n        1 => \"Timed\",\n        2 => \"Minimum time\",\n        3 => \"Not possible\"\n    )\n\n    transfer_counts = Dict{Int, Int}()\n    for row in eachrow(gtfs.transfers)\n        transfer_type = get(row, :transfer_type, 0)\n        transfer_counts[transfer_type] = get(transfer_counts, transfer_type, 0) + 1\n    end\n\n    for (type_id, count) in sort(collect(transfer_counts))\n        type_name = get(transfer_types, type_id, \"Unknown ($type_id)\")\n        println(\"$type_name: $count\")\n    end\nend","category":"page"},{"location":"examples/#Fare-Analysis","page":"Examples","title":"Fare Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze fares if available\nif gtfs.fare_attributes !== nothing\n    println(\"=== Fare Analysis ===\")\n    println(\"Fare types: \", nrow(gtfs.fare_attributes))\n\n    for row in eachrow(gtfs.fare_attributes)\n        println(\"Fare: $(row.fare_id)\")\n        println(\"  Price: $(row.price)\")\n        println(\"  Currency: $(row.currency_type)\")\n        println(\"  Payment method: $(row.payment_method)\")\n        println(\"  Transfers: $(row.transfers)\")\n        println()\n    end\nend","category":"page"},{"location":"examples/#Shape-Analysis","page":"Examples","title":"Shape Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Analyze route shapes if available\nif gtfs.shapes !== nothing\n    println(\"=== Shape Analysis ===\")\n    println(\"Total shape points: \", nrow(gtfs.shapes))\n\n    # Count shapes\n    shape_ids = unique(gtfs.shapes.shape_id)\n    println(\"Unique shapes: \", length(shape_ids))\n\n    # Find longest shapes\n    shape_lengths = Dict{String, Int}()\n    for row in eachrow(gtfs.shapes)\n        shape_id = row.shape_id\n        shape_lengths[shape_id] = get(shape_lengths, shape_id, 0) + 1\n    end\n\n    longest_shapes = sort(collect(shape_lengths), by=x->x[2], rev=true)[1:min(5, length(shape_lengths))]\n    println(\"\\nLongest shapes (by number of points):\")\n    for (shape_id, count) in longest_shapes\n        println(\"  $shape_id: $count points\")\n    end\nend","category":"page"},{"location":"examples/#Data-Export-Examples","page":"Examples","title":"Data Export Examples","text":"","category":"section"},{"location":"examples/#Export-to-CSV","page":"Examples","title":"Export to CSV","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Export specific data to CSV files\nusing CSV\n\n# Export bus routes\nbus_routes = filter(row -> row.route_type == 3, gtfs.routes)\nCSV.write(\"bus_routes.csv\", bus_routes)\n\n# Export stops with coordinates\nstops_with_coords = filter(row -> !ismissing(row.stop_lat) && !ismissing(row.stop_lon), gtfs.stops)\nCSV.write(\"stops_with_coords.csv\", stops_with_coords)\n\nprintln(\"Exported data to CSV files\")","category":"page"},{"location":"examples/#Create-Summary-Statistics","page":"Examples","title":"Create Summary Statistics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Create a summary report\nfunction create_summary_report(gtfs)\n    report = \"\"\"\n    GTFS Feed Summary Report\n    ========================\n\n    Basic Statistics:\n    - Agencies: $(nrow(gtfs.agency))\n    - Stops: $(nrow(gtfs.stops))\n    - Routes: $(nrow(gtfs.routes))\n    - Trips: $(nrow(gtfs.trips))\n    - Stop Times: $(nrow(gtfs.stop_times))\n\n    Route Types:\n    \"\"\"\n\n    # Add route type breakdown\n    route_counts = Dict{Int, Int}()\n    for row in eachrow(gtfs.routes)\n        route_type = row.route_type\n        route_counts[route_type] = get(route_counts, route_type, 0) + 1\n    end\n\n    for (type_id, count) in sort(collect(route_counts))\n        report *= \"  - Type $type_id: $count routes\\n\"\n    end\n\n    # Add optional files status\n    report *= \"\\nOptional Files:\\n\"\n    optional_files = [\n        (\"Calendar\", gtfs.calendar),\n        (\"Fare Attributes\", gtfs.fare_attributes),\n        (\"Shapes\", gtfs.shapes),\n        (\"Transfers\", gtfs.transfers)\n    ]\n\n    for (name, df) in optional_files\n        status = df !== nothing ? \"Present\" : \"Not present\"\n        report *= \"  - $name: $status\\n\"\n    end\n\n    return report\nend\n\n# Generate and save report\nreport = create_summary_report(gtfs)\nopen(\"gtfs_summary.txt\", \"w\") do io\n    write(io, report)\nend\n\nprintln(\"Summary report saved to gtfs_summary.txt\")","category":"page"},{"location":"examples/#Error-Handling-Examples","page":"Examples","title":"Error Handling Examples","text":"","category":"section"},{"location":"examples/#Safe-Data-Access","page":"Examples","title":"Safe Data Access","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Safe way to access optional data\nfunction safe_get_feed_info(gtfs)\n    if gtfs.feed_info !== nothing && nrow(gtfs.feed_info) > 0\n        info = gtfs.feed_info[1, :]\n        return Dict(\n            \"feed_publisher_name\" => get(info, :feed_publisher_name, \"Unknown\"),\n            \"feed_publisher_url\" => get(info, :feed_publisher_url, \"Unknown\"),\n            \"feed_lang\" => get(info, :feed_lang, \"Unknown\"),\n            \"feed_version\" => get(info, :feed_version, \"Unknown\")\n        )\n    else\n        return Dict(\"error\" => \"Feed info not available\")\n    end\nend\n\nfeed_info = safe_get_feed_info(gtfs)\nprintln(\"Feed Info: \", feed_info)","category":"page"},{"location":"examples/#Handling-Missing-Data","page":"Examples","title":"Handling Missing Data","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Handle missing or invalid data gracefully\nfunction analyze_stop_coordinates(gtfs)\n    valid_stops = 0\n    invalid_stops = 0\n\n    for row in eachrow(gtfs.stops)\n        lat = get(row, :stop_lat, missing)\n        lon = get(row, :stop_lon, missing)\n\n        if ismissing(lat) || ismissing(lon)\n            invalid_stops += 1\n        elseif -90 <= lat <= 90 && -180 <= lon <= 180\n            valid_stops += 1\n        else\n            invalid_stops += 1\n        end\n    end\n\n    return (valid=valid_stops, invalid=invalid_stops)\nend\n\ncoord_stats = analyze_stop_coordinates(gtfs)\nprintln(\"Stop coordinates: $(coord_stats.valid) valid, $(coord_stats.invalid) invalid\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples demonstrate the flexibility and power of GTFSSchedule.jl for transit data analysis. The package's integration with DataFrames makes it easy to perform complex queries and transformations on GTFS data.","category":"page"},{"location":"#GTFSSchedules.jl","page":"Home","title":"GTFSSchedules.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for reading, validating, and working with GTFS (General Transit Feed Specification) transit data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GTFS is the standard format for public transportation data used by Google Maps, transit apps, and planning tools. This package provides a complete Julia implementation for reading GTFS feeds, validating them against the official specification, and accessing the data through familiar DataFrames.","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Complete GTFS Support: Full implementation of the GTFS Schedule specification\nComprehensive Validation: Built-in validation against official GTFS rules with detailed error reporting (rules auto-generated from the specification)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/moviro-hub/GTFSSchedules.jl.git\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GTFSSchedules\nusing DataFrames\n\n# Read a GTFS feed from ZIP file\ngtfs = read_gtfs(\"path/to/transit_feed.zip\")\n\n# Or read from unzipped directory\ngtfs = read_gtfs(\"path/to/transit_feed/\")\n\n# Validate the feed\nresult = GTFSSchedules.Validations.validate_gtfs(gtfs)\nif result.is_valid\n    println(\"GTFS feed is valid!\")\nelse\n    println(\"Validation issues found:\")\n    println(result)\nend\n\n# Access data using DataFrames\nprintln(\"Number of agencies: \", nrow(gtfs[\"agency.txt\"]))\nprintln(\"Number of stops: \", nrow(gtfs[\"stops.txt\"]))\nprintln(\"Number of routes: \", nrow(gtfs[\"routes.txt\"]))\n\n# Filter data\nroutes_df = gtfs[\"routes.txt\"]\nbus_routes = filter(row -> row.route_type == 3, routes_df)\nprintln(\"Number of bus routes: \", nrow(bus_routes))","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"#Reading-GTFS-Data","page":"Home","title":"Reading GTFS Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main function for reading GTFS data is read_gtfs(). It can handle both ZIP files and unzipped directories:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# From ZIP file\ngtfs = read_gtfs(\"transit_feed.zip\")\n\n# From directory\ngtfs = read_gtfs(\"transit_feed/\")","category":"page"}]
}
